searchData={"content_type":"text/plain","items":[{"doc":null,"ref":"amqp_confirms_handler.html","title":"amqp_confirms_handler","type":"module"},{"doc":null,"ref":"amqp_confirms_handler.html#add/3","title":"amqp_confirms_handler.add/3","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#code_change/3","title":"amqp_confirms_handler.code_change/3","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#delete/2","title":"amqp_confirms_handler.delete/2","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#handle_call/3","title":"amqp_confirms_handler.handle_call/3","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#handle_cast/2","title":"amqp_confirms_handler.handle_cast/2","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#handle_info/2","title":"amqp_confirms_handler.handle_info/2","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#init/1","title":"amqp_confirms_handler.init/1","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#register/3","title":"amqp_confirms_handler.register/3","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#start/3","title":"amqp_confirms_handler.start/3","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#terminate/2","title":"amqp_confirms_handler.terminate/2","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#unregister/1","title":"amqp_confirms_handler.unregister/1","type":"function"},{"doc":null,"ref":"amqp_confirms_handler.html#wait_for_confirms/2","title":"amqp_confirms_handler.wait_for_confirms/2","type":"function"},{"doc":null,"ref":"gen_amqp.html","title":"gen_amqp","type":"behaviour"},{"doc":null,"ref":"gen_amqp.html#abcast/2","title":"gen_amqp.abcast/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#abcast/3","title":"gen_amqp.abcast/3","type":"function"},{"doc":"acknowledge a message","ref":"gen_amqp.html#ack/1","title":"gen_amqp.ack/1","type":"function"},{"doc":"Bind a queue to an exchange with the default routing key.","ref":"gen_amqp.html#bind/2","title":"gen_amqp.bind/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#bind/3","title":"gen_amqp.bind/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#call/2","title":"gen_amqp.call/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#call/3","title":"gen_amqp.call/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#cast/2","title":"gen_amqp.cast/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#code_change/3","title":"gen_amqp.code_change/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:code_change/3","title":"gen_amqp.code_change/3","type":"callback"},{"doc":null,"ref":"gen_amqp.html#connect/1","title":"gen_amqp.connect/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#connect/2","title":"gen_amqp.connect/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#connection_pid/1","title":"gen_amqp.connection_pid/1","type":"function"},{"doc":"Create a direct exchange","ref":"gen_amqp.html#direct_exchange/1","title":"gen_amqp.direct_exchange/1","type":"function"},{"doc":"Disconnect from the AMQP server.","ref":"gen_amqp.html#disconnect/0","title":"gen_amqp.disconnect/0","type":"function"},{"doc":null,"ref":"gen_amqp.html#enter_loop/3","title":"gen_amqp.enter_loop/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#enter_loop/4","title":"gen_amqp.enter_loop/4","type":"function"},{"doc":null,"ref":"gen_amqp.html#enter_loop/5","title":"gen_amqp.enter_loop/5","type":"function"},{"doc":"Create a fanout exchange","ref":"gen_amqp.html#fanout_exchange/1","title":"gen_amqp.fanout_exchange/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:handle_basic_cancel/2","title":"gen_amqp.handle_basic_cancel/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_basic_deliver/2","title":"gen_amqp.handle_basic_deliver/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_basic_reject/2","title":"gen_amqp.handle_basic_reject/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_basic_return/2","title":"gen_amqp.handle_basic_return/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#handle_call/3","title":"gen_amqp.handle_call/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:handle_call/3","title":"gen_amqp.handle_call/3","type":"callback"},{"doc":null,"ref":"gen_amqp.html#handle_cast/2","title":"gen_amqp.handle_cast/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:handle_cast/2","title":"gen_amqp.handle_cast/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_connect/1","title":"gen_amqp.handle_connect/1","type":"callback"},{"doc":null,"ref":"gen_amqp.html#handle_continue/2","title":"gen_amqp.handle_continue/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:handle_continue/2","title":"gen_amqp.handle_continue/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_disconnect/2","title":"gen_amqp.handle_disconnect/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_error/4","title":"gen_amqp.handle_error/4","type":"callback"},{"doc":null,"ref":"gen_amqp.html#handle_info/2","title":"gen_amqp.handle_info/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:handle_info/2","title":"gen_amqp.handle_info/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_queue_deleted/2","title":"gen_amqp.handle_queue_deleted/2","type":"callback"},{"doc":null,"ref":"gen_amqp.html#c:handle_rpc/2","title":"gen_amqp.handle_rpc/2","type":"callback"},{"doc":"Connection behavior options: auto_ack_unhandled: boolean for automatic acknowledgment buffer: buffering strategy (none, queue, or custom module) confirms: message confirmation handling Connection parameters: heartbeat: heartbeat interval host: server hostname or IP virtual_host: RabbitMQ virtual host username: authentication username password: authentication password Network settings: port: server port number channel_max: maximum number of channels frame_max: maximum frame size connection_timeout: connection timeout ssl_options: SSL configuration auth_mechanisms: authentication mechanisms client_properties: client properties socket_options: TCP socket options","ref":"gen_amqp.html#init/1","title":"gen_amqp.init/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:init/1","title":"gen_amqp.init/1","type":"callback"},{"doc":null,"ref":"gen_amqp.html#multi_call/2","title":"gen_amqp.multi_call/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#multi_call/3","title":"gen_amqp.multi_call/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#multi_call/4","title":"gen_amqp.multi_call/4","type":"function"},{"doc":"negative acknowledge a message","ref":"gen_amqp.html#nack/1","title":"gen_amqp.nack/1","type":"function"},{"doc":"Extract the payload from the message.","ref":"gen_amqp.html#payload/1","title":"gen_amqp.payload/1","type":"function"},{"doc":"Publish a message to an exchange with the default routing key.","ref":"gen_amqp.html#publish/2","title":"gen_amqp.publish/2","type":"function"},{"doc":"Publish a message to an exchange with a routing key.","ref":"gen_amqp.html#publish/3","title":"gen_amqp.publish/3","type":"function"},{"doc":"Publish a message and wait for confirmation.","ref":"gen_amqp.html#publish_confirmed/2","title":"gen_amqp.publish_confirmed/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#publish_confirmed/3","title":"gen_amqp.publish_confirmed/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#publish_confirmed_async/4","title":"gen_amqp.publish_confirmed_async/4","type":"function"},{"doc":"Create a queue with the given name.","ref":"gen_amqp.html#queue/1","title":"gen_amqp.queue/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#queue/2","title":"gen_amqp.queue/2","type":"function"},{"doc":"Get the length of a queue. This number can be off by 1 if the connection is consuming from the queue.","ref":"gen_amqp.html#queue_length/1","title":"gen_amqp.queue_length/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#reply/2","title":"gen_amqp.reply/2","type":"function"},{"doc":"Synchronous RPC call to the given queue. These cannot be buffered if the connection is lost.","ref":"gen_amqp.html#rpc_request/2","title":"gen_amqp.rpc_request/2","type":"function"},{"doc":"Send a response to an RPC as a synchronous call to the given queue. These cannot be buffered if the connection is lost.","ref":"gen_amqp.html#rpc_response/3","title":"gen_amqp.rpc_response/3","type":"function"},{"doc":null,"ref":"gen_amqp.html#start/4","title":"gen_amqp.start/4","type":"function"},{"doc":null,"ref":"gen_amqp.html#start/5","title":"gen_amqp.start/5","type":"function"},{"doc":null,"ref":"gen_amqp.html#start_link/4","title":"gen_amqp.start_link/4","type":"function"},{"doc":null,"ref":"gen_amqp.html#start_link/5","title":"gen_amqp.start_link/5","type":"function"},{"doc":"Subscribe to a queue with the given name. This will create a new consumer tag for the given queue. The consumer tag will be returned in the reply.","ref":"gen_amqp.html#subscribe/1","title":"gen_amqp.subscribe/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#subscribe/2","title":"gen_amqp.subscribe/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#subscribe/3","title":"gen_amqp.subscribe/3","type":"function"},{"doc":"Extract the delivery tag from the message.","ref":"gen_amqp.html#tag/1","title":"gen_amqp.tag/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#terminate/2","title":"gen_amqp.terminate/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#c:terminate/2","title":"gen_amqp.terminate/2","type":"callback"},{"doc":"Create a topic exchange","ref":"gen_amqp.html#topic_exchange/1","title":"gen_amqp.topic_exchange/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#unsubscribe/1","title":"gen_amqp.unsubscribe/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#unsubscribe_all/0","title":"gen_amqp.unsubscribe_all/0","type":"function"},{"doc":null,"ref":"gen_amqp.html#wait_for_confirms/1","title":"gen_amqp.wait_for_confirms/1","type":"function"},{"doc":null,"ref":"gen_amqp.html#wait_for_confirms/2","title":"gen_amqp.wait_for_confirms/2","type":"function"},{"doc":null,"ref":"gen_amqp.html#t:amqp_connection/0","title":"gen_amqp.amqp_connection/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:amqp_msg/0","title":"gen_amqp.amqp_msg/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:args/0","title":"gen_amqp.args/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:basic_cancel/0","title":"gen_amqp.basic_cancel/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:basic_reject/0","title":"gen_amqp.basic_reject/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:buffer_module/0","title":"gen_amqp.buffer_module/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:channel_tag/0","title":"gen_amqp.channel_tag/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:config/0","title":"gen_amqp.config/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:confirms_fun/0","title":"gen_amqp.confirms_fun/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:confirms_handler/0","title":"gen_amqp.confirms_handler/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:confirms_module_function/0","title":"gen_amqp.confirms_module_function/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:consumer_tag/0","title":"gen_amqp.consumer_tag/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:deliver_payload/0","title":"gen_amqp.deliver_payload/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:exchange/0","title":"gen_amqp.exchange/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:file/0","title":"gen_amqp.file/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:message/0","title":"gen_amqp.message/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:name/0","title":"gen_amqp.name/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:options/0","title":"gen_amqp.options/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:parsed_config/0","title":"gen_amqp.parsed_config/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:queue_name/0","title":"gen_amqp.queue_name/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:queue_options/0","title":"gen_amqp.queue_options/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:reply_code/0","title":"gen_amqp.reply_code/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:reply_text/0","title":"gen_amqp.reply_text/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:return_tag/0","title":"gen_amqp.return_tag/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:routing_key/0","title":"gen_amqp.routing_key/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:sflag/0","title":"gen_amqp.sflag/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:stimeout/0","title":"gen_amqp.stimeout/0","type":"type"},{"doc":null,"ref":"gen_amqp.html#t:tag/0","title":"gen_amqp.tag/0","type":"type"},{"doc":"# gen_amqp\n\n`gen_amqp` is an Erlang library that provides a generic behavior for interacting with RabbitMQ. It abstracts the details of connection management, channel handling, queue declaration, message publishing, and consumption, offering a simple and consistent interface for Erlang applications.\n\nWhy use `gen_amqp`?\n\n- **Simplicity:** Provides a high-level API for common AMQP operations, reducing boilerplate code.\n- **Reliability:** Manages connections and channels, handling reconnections and error scenarios gracefully.\n- **Integration:** Designed to fit naturally into Erlang/OTP applications, leveraging OTP principles and patterns.\n- **Testability:** Facilitates testing by providing clear abstractions and interfaces.","ref":"readme.html","title":"Overview","type":"extras"},{"doc":"When the connection to the AMQP broker is down, `gen_amqp` can buffer outgoing messages according to the configured buffering strategy. This allows your application to continue sending messages even during temporary outages, with delivery deferred until the connection is restored.\n\n#","ref":"readme.html#queueing-and-message-buffering","title":"Queueing and Message Buffering - Overview","type":"extras"},{"doc":"- **none**  \n  No buffering is performed. Attempts to publish while disconnected will immediately return an error.  \n  *Pros*: Simple, no memory or resource overhead.  \n  *Cons*: Messages are lost if the connection is unavailable.\n\n- **queue**  \n  Messages are buffered in an in-memory FIFO queue while the connection is down. When the connection is restored, buffered messages are sent in order.  \n  *Pros*: No message loss during short outages, fast recovery.  \n  *Cons*: Memory usage grows with the number of buffered messages; messages are lost if the process crashes before reconnection.\n\n- **Mod**  \n  A custom buffering strategy, where `Mod` is a module that implements your own buffering logic (for example, using ETS, disk, or a distributed store).  \n  The module must export the following functions:\n\n    - `buff_put(Module :: module(), Msg :: any())`  \n      Add a message to the buffer.\n\n    - `buff_lock(Module :: module(), Count :: pos_integer())`  \n      Lock and retrieve up to `Count` messages for delivery. Returns `{ok, list(any())}`.\n\n    - `buff_unlock(Id :: any())`  \n      Unlocks the buffer after delivery attempt.\n\n    - `buff_delete(Id :: any())`\n      Remove all locked messages from the buffer after successful delivery.\n\n  You can refer to the sample implementation in [`test/buffer.erl`](test/buffer.erl), which uses ETS for in-memory buffering.\n\n  You own implementation does not have to use integer based keys like the example.\n\n  *Pros*: Full control over buffering, can implement persistence, custom ordering, or distributed buffering.  \n  *Cons*: Requires additional implementation and testing; performance and reliability depend on your code.\n\n#","ref":"readme.html#buffering-types","title":"Buffering Types - Overview","type":"extras"},{"doc":"Once the connection is restored, `gen_amqp` automatically flushes the buffer (if enabled), delivering all queued messages in order. If buffering is set to `none`, only new messages sent after reconnection will be delivered.\n\nChoose the buffering strategy that best fits your application's reliability, durability, and performance needs.","ref":"readme.html#behavior-on-reconnection","title":"Behavior on Reconnection - Overview","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,49,46,50]}}